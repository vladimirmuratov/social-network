import React, {useContext, useEffect, useState} from 'react'
import {Redirect} from "react-router";
import Modal from "react-modal";
import useSound from "use-sound";

import {deleteTodoItem, getAllTodoList, postNewTodoItem, updateTodoItem} from "api";
import {ContextSound} from "components/context";
import sendMessageSound from "sounds/sendMessage.mp3";
import deleteItemSound from 'sounds/deleteMessage.mp3'
import 'pages/todoList/styles.css'

const TodoList = () => {
    if (!localStorage.getItem("userIsLogged")) {
        return <Redirect to="/login"/>
    }
    const [allTodoList, setAllTodoList] = useState([])
    const [error, setError] = useState([])

    useEffect(async () => {
        try {
            const data = await getAllTodoList()
            // console.log('todo', data)
            setAllTodoList(data)
        } catch (err) {
            console.log('Error ', err)
        }
    }, [])

    return (
        <>
            {error &&
            <ul>
                {error.map((message, index) => (
                    <li key={index} className="text-danger">{message}</li>
                ))}
            </ul>
            }
            <div>
                {allTodoList.length === 0 && <h5><b>TodoList is empty</b></h5>}
                <div className="row" style={{height: "330px", overflowY: "auto"}}>
                    {allTodoList.length !== 0 &&
                    allTodoList.map((todoItem, index) => (
                        <TodoItem key={index} todoItem={todoItem} setAllTodoList={setAllTodoList} setError={setError}/>
                    ))
                    }
                </div>
                <ModalAddTodoItemForm setAllTodoList={setAllTodoList} setError={setError}/>
            </div>
        </>
    )
}

const TodoItem = ({todoItem, setAllTodoList, setError}) => {
    const [updateText, setUpdateText] = useState(todoItem.title)
    const [isUpdate, setIsUpdate] = useState(false)
    const [isSound, setIsSound] = useContext(ContextSound)
    const [deleteItemSoundApp] = useSound(deleteItemSound, {volume: 0.1})
    const [updateItemSoundApp] = useSound(sendMessageSound, {volume: 0.1})


    const handleUpdate = () => {
        setIsUpdate(true)
    }

    const handleOnBlur = async (id) => {
        setIsUpdate(false)
        const options = {
            title: updateText
        }
        try {
            setError([])
            const data = await updateTodoItem(id, options)
            // console.log('data update', data)
            if (data.resultCode === 0) {
                if(isSound){
                    updateItemSoundApp()
                }
                try {
                    const data = await getAllTodoList()
                    setAllTodoList([])
                    setAllTodoList(data)
                } catch (err) {
                    console.log('Error ', err)
                }
            } else {
                setError(data.messages)
            }
        } catch (err) {
            console.log('Error ', err)
        }
    }

    const handleDelete = async (id) => {
        try {
            setError([])
            const data = await deleteTodoItem(id)
            // console.log('data delete', data)
            if (data.resultCode === 0) {
                if(isSound){
                    deleteItemSoundApp()
                }
                const data = await getAllTodoList()
                // console.log('todo', data)
                setAllTodoList([])
                setAllTodoList(data)
            } else {
                setError(data.messages)
            }
        } catch (err) {
            console.log('Error ', err)
        }
    }

    return (
        <div className="col-md-4">
            <ul id="notes">
                <li>
                    {isUpdate
                        ? <input
                            type="text"
                            value={updateText}
                            onChange={e => setUpdateText(e.target.value)}
                            onBlur={() => {
                                handleOnBlur(todoItem.id)
                            }}
                            autoFocus={true}
                        />
                        : <p>{todoItem.title}</p>
                    }
                    <div>
                        <button type="button" className="btn btn-link" onClick={() => {
                            handleDelete(todoItem.id)
                        }}>delete
                        </button>
                        <button
                            type="button"
                            className="btn btn-link"
                            onClick={handleUpdate}
                        >update
                        </button>
                    </div>
                    <small
                        className="form-text text-muted">{todoItem.addedDate.slice(0, 10)} {todoItem.addedDate.slice(11, 16)}</small>
                </li>
            </ul>
        </div>
    )
}

const ModalAddTodoItemForm = ({setAllTodoList, setError}) => {
    Modal.setAppElement('#root')
    const [modalIsOpen, setIsOpen] = React.useState(false)
    const [newTodoItem, setNewTodoItem] = useState('')
    const [isSound, setIsSound] = useContext(ContextSound)
    const [sendMessageSoundApp] = useSound(sendMessageSound, {volume: 0.1})

    const customStyles = {
        content: {
            width: '50%',
            height: 'auto',
            top: '50%',
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            marginRight: '-50%',
            transform: 'translate(-50%, -50%)'
        }
    }

    function openModal() {
        setIsOpen(true);
    }

    const afterOpenModal = () => {
        // references are now sync'd and can be accessed.
    }

    const closeModal = () => {
        setIsOpen(false);
    }

    const handleSubmit = async (e) => {
        e.preventDefault()
        const options = {
            title: newTodoItem
        }
        try {
            const data = await postNewTodoItem(options)
            // console.log('data post new todo', data)
            setNewTodoItem('')
            if (data.resultCode === 0) {
                if (isSound) {
                    sendMessageSoundApp()
                }
                closeModal()
                try {
                    const data = await getAllTodoList()
                    // console.log('get All todo', data)
                    setAllTodoList([])
                    setAllTodoList(data)
                } catch (err) {
                    console.log('Error ', err)
                }
            } else {
                setError(data.messages)
            }
        } catch (err) {
            console.log('Error ', err)
        }

    }

    return (
        <div className="row justify-content-md-center" style={{margin: '20px 0px'}}>
            <div className="col-md-4">
                <button
                    className="btn btn-success"
                    style={{marginLeft: '80px'}}
                    onClick={openModal}
                >New todo item
                </button>
                <Modal
                    isOpen={modalIsOpen}
                    onAfterOpen={afterOpenModal}
                    onRequestClose={closeModal}
                    style={customStyles}
                    contentLabel="New todo item"
                >
                    <div className="row justify-content-md-center">
                        <div className="col-md-4" style={{width: '80%', margin: '10% auto'}}>
                            <form onSubmit={handleSubmit}>
                                <div className="mb-3">
                <textarea
                    className="form-control"
                    placeholder="Text..."
                    value={newTodoItem}
                    onChange={e => setNewTodoItem(e.target.value)}
                    autoFocus={true}
                />
                                </div>
                                <div style={{float: 'right'}}>
                                    <button type="submit" className="btn btn-primary" disabled={!newTodoItem}>send
                                    </button>
                                    <button type="button" className="btn btn-danger" onClick={closeModal}>close</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </Modal>
            </div>
        </div>
    );
}


export default TodoList