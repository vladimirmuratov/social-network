import React, {useContext, useEffect, useRef, useState} from 'react'
import {Redirect} from "react-router";
import {Link} from "react-router-dom";
import Modal from 'react-modal'

import {deleteMessage, dialogWithUser, getProfileApi, postMessageApi} from "api";
import Paginator from "components/paginator";
import userImgDefault from "images/user.png"
import borderLetter from "images/airmail-border.png"
import sendMessageSound from 'sounds/sendMessage.mp3'
import deleteMessageSound from 'sounds/deleteMessage.mp3'
import useSound from "use-sound";
import {ContextSound} from "components/context";

const Dialog = ({match}) => {
    if (!localStorage.getItem("userIsLogged")) {
        return <Redirect to="/login"/>
    }
    const recipientId = Number(match.params.userId)
    // console.log('userId', userId)

    const [messages, setMessages] = useState([])
    const [error, setError] = useState([])
    const [messagesCount, setMessagesCount] = useState(0)
    const [currentPage, setCurrentPage] = useState(1)
    const [pageSize, setPageSize] = useState(10)
    const messagesAnchorRef = useRef(null)
    const [isAutoScroll, setIsAutoScroll] = useState(true)
    const [recipientName, setRecipientName] = useState('')
    const [recipientImg, setRecipientImg] = useState('')

    // console.log('messages', messages)

    const url = `/dialogs/${recipientId}/messages?page=${currentPage}&count=${pageSize}`

    const onPageChanged = (pageNumber) => {
        setCurrentPage(pageNumber)
    }

    useEffect(async () => {
        const data = await getProfileApi(recipientId)
        // console.log('img recipient', data.photos.small)
        setRecipientName(data.fullName)
        setRecipientImg(data.photos.small)
    }, [])

    useEffect(async () => {
        try {
            const data = await dialogWithUser(recipientId, currentPage, pageSize)
            // console.log('dialog with user', data)
            setMessages(data.items)
            setError(data.error)
            setMessagesCount(data.totalCount)
        } catch (err) {
            console.log('Error ', err)
        }
    }, [dialogWithUser, currentPage])

    useEffect(() => {
        if (isAutoScroll) {
            messagesAnchorRef.current?.scrollIntoView({
                behavior: "smooth",
                block: "nearest",
                inline: "start"
            })
        }
    }, [messages, isAutoScroll])

    return (
        <>
            {error &&
            <ul>
                {error.map((message, index) => (
                    <li key={index} className="text-danger">{message}</li>
                ))}
            </ul>
            }
            <div className="row" style={{marginTop: '1px'}}>
                <div
                    className="col-md-2"
                    style={{
                        background: '#5cb85c',
                        color: 'white',
                        fontFamily: 'titillium web,sans-serif',
                        padding: '12px 5px',
                        width: 'auto'
                    }}>
                    <u>Dialog with:</u> <span>{recipientName} </span>
                    <Link to={`/profile/${recipientId}`}>
                        <img
                            src={recipientImg ? recipientImg : userImgDefault}
                            alt="..."
                            style={{borderRadius: "50%", height: "40px"}}
                        />
                    </Link>
                </div>
                <div className="col-md-4" style={{marginLeft: '20%'}}>
                    <Paginator
                        totalUsersCount={messagesCount}
                        onPageChanged={onPageChanged}
                        currentPage={currentPage}
                        pageSize={pageSize}
                    />
                </div>
            </div>
            <div className="row justify-content-md-center" style={{"height": "330px", "overflowY": "auto"}}>
                {messages.length !== 0
                    ? messages.map((messageItem, index) => (
                        <Message
                            key={index}
                            messageItem={messageItem}
                            setMessages={setMessages}
                            setError={setError}
                            setMessagesCount={setMessagesCount}
                            recipientId={recipientId}
                            currentPage={currentPage}
                            pageSize={pageSize}
                        />
                    ))
                    : <h3 className="text-center"><b>No messages</b></h3>
                }
                <div ref={messagesAnchorRef}/>
            </div>
            {/*<AddMessageForm*/}
            {/*    userId={userId}*/}
            {/*    setMessages={setMessages}*/}
            {/*    setError={setError}*/}
            {/*    setMessagesCount={setMessagesCount}*/}
            {/*    setCurrentPage={setCurrentPage}*/}
            {/*    url={url}*/}
            {/*/>*/}
            <div className="row justify-content-md-center">
                <AutoScroll isAutoScroll={isAutoScroll} setIsAutoScroll={setIsAutoScroll}/>
                <ModalAddMessageForm
                    recipientName={recipientName}
                    recipientImg={recipientImg}
                    recipientId={recipientId}
                    currentPage={currentPage}
                    pageSize={pageSize}
                    setMessages={setMessages}
                    setError={setError}
                    setMessagesCount={setMessagesCount}
                    setCurrentPage={setCurrentPage}
                    url={url}
                />
            </div>
        </>
    )
}

const Message = ({messageItem, setMessages, setError, setMessagesCount, recipientId, currentPage, pageSize}) => {
    const myId = Number(localStorage.getItem("userId"))
    const [senderId, setSenderId] = useState(Number(messageItem.senderId))
    const [senderImg, setSenderImg] = useState('')
    const [messageId, setMessageId] = useState(messageItem.id)
    const [isDeleteMessage, setIsDeleteMessage] = useState(false)
    const [isSound, setIsSound] = useContext(ContextSound)
    const [deleteMessageSoundApp] = useSound(deleteMessageSound, {volume: 0.1})

    // console.log('messageId', messageId)

    useEffect(async () => {
        try {
            const data = await getProfileApi(senderId)
            // console.log('d', data)
            setSenderImg(data.photos.small)
        } catch (err) {
            console.log('Error', err)
        }
    }, [messageItem])

    useEffect(async () => {
        if (isDeleteMessage) {
            try {
                const data = await deleteMessage(messageId)
                // console.log('data delete', data)
                if (data.resultCode === 0) {
                    if (isSound) {
                        deleteMessageSoundApp()
                    }
                    try {
                        setMessages([])
                        setError([])
                        setMessagesCount(0)
                        const data = await dialogWithUser(recipientId, currentPage, pageSize)
                        // console.log('dialog with user', data)
                        setMessages(data.items)
                        setError(data.error)
                        setMessagesCount(data.totalCount)
                    } catch (err) {
                        console.log('Error ', err)
                    }
                }
            } catch (err) {
                console.log('Error', err)
            }
        }
    }, [isDeleteMessage])


    return (
        <>
            {senderImg &&
            <div className="row justify-content-md-center">
                <div className="col-md-4 shadow p-3 mb-5 bg-body rounded">
                    <div className="row"
                         style={
                             myId !== senderId
                                 ? {margin: '10px', backgroundColor: '#ffffcc', width: '400px'}
                                 : {margin: '10px', backgroundColor: '#ccffcc', width: '400px'}
                         }>
                        <div className="col-md-2">
                            <Link to={`/profile/${senderId}`}>
                                <img
                                    className="rounded mx-auto d-block"
                                    src={senderImg}
                                    alt={messageItem.senderName}
                                    style={{height: "80px", marginTop: "30%"}}
                                />
                            </Link>
                        </div>
                        <div className="col-md-10">
                            <div className="card-body" style={{marginLeft: "15px", padding: '5px'}}>
                                <small className="form-text text-muted">{messageItem.senderName}</small>
                                {messageItem.viewed
                                    ? < span className="badge bg-success" style={{marginLeft: '20px'}}>viewed</span>
                                    : < span className="badge bg-danger" style={{marginLeft: '20px'}}> not viewed</span>
                                }
                                <p
                                    className="card-text"
                                    style={{
                                        backgroundColor: '#E0E0E0',
                                        padding: '15px 20px',
                                        borderRadius: '50px'
                                    }}
                                >
                                    {messageItem.body}
                                </p>
                                <small
                                    className="form-text text-muted">{messageItem.addedAt.slice(0, 10)} {messageItem.addedAt.slice(11, 19)}</small>
                                <div>
                                    <input
                                        type="checkbox"
                                        className="form-check-input"
                                        id="exampleCheck2"
                                        checked={isDeleteMessage}
                                        onChange={e => setIsDeleteMessage(e.target.checked)}
                                    />
                                    <label className="form-check-label" htmlFor="exampleCheck2">delete message</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }
        </>
    )
}

const AutoScroll = ({isAutoScroll, setIsAutoScroll}) => {
    return (
        <div className="col-md-4 mb-3 form-check" style={{marginLeft: '30px', marginTop: '10px'}}>
            <input
                type="checkbox"
                className="form-check-input"
                id="exampleCheck1"
                checked={isAutoScroll}
                onChange={e => setIsAutoScroll(e.target.checked)}
            />
            <label className="form-check-label" htmlFor="exampleCheck1">Autoscroll</label>
        </div>
    )
}

/*const AddMessageForm = ({userId, setMessages, setError, setMessagesCount, setCurrentPage, url}) => {
    const [message, setMessage] = useState('')


    const handleSubmit = async (e) => {
        e.preventDefault()
        const options = {
            body: message
        }
        try {
            const data = await postMessageApi(`dialogs/${userId}/messages`, options)
            // console.log('data put message', data)
            setMessage('')
        } catch (err) {
            console.log('Error ', err)
        }
        try {
            const data = await dialogWithUser(url)
            // console.log('dialog with user', data.items)
            setMessages(data.items)
            setError(data.error)
            setMessagesCount(data.totalCount)
            setCurrentPage(1)
        } catch (err) {
            console.log('Error ', err)
        }
    }

    return (
        <div className="row justify-content-md-center">
            <div className="col-md-4">
                <form onSubmit={handleSubmit}>
                    <div className="mb-3">
                <textarea className="form-control" placeholder="Text..." value={message}
                          onChange={e => setMessage(e.target.value)} autoFocus={true}/>
                    </div>
                    <button type="submit" className="btn btn-primary" disabled={!message}>Send</button>
                </form>
            </div>
        </div>
    )
}*/

const ModalAddMessageForm = ({setMessages, setError, setMessagesCount, setCurrentPage, pageSize, currentPage, recipientId, recipientImg, recipientName}) => {
    Modal.setAppElement('#root')
    const [modalIsOpen, setIsOpen] = React.useState(false)
    const [message, setMessage] = useState('')
    const [isSound, setIsSound] = useContext(ContextSound)
    const [sendMessageSoundApp] = useSound(sendMessageSound, {volume: 0.1})

    const customStyles = {
        content: {
            width: '50%',
            height: 'auto',
            top: '50%',
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            marginRight: '-50%',
            transform: 'translate(-50%, -50%)',
            border: '40px solid transparent',
            borderImage: `url(${borderLetter}) 30 30 round`,
            borderImageSlice: 100
        }
    }

    function openModal() {
        setIsOpen(true);
    }

    const afterOpenModal = () => {
        // references are now sync'd and can be accessed.
    }

    const closeModal = () => {
        setIsOpen(false);
    }

    const handleSubmit = async (e) => {
        e.preventDefault()
        const options = {
            body: message
        }
        try {
            const data = await postMessageApi(recipientId, options)
            // console.log('data put message', data)
            setMessage('')
            if (isSound) {
                sendMessageSoundApp()
            }
            closeModal()
        } catch (err) {
            console.log('Error ', err)
        }
        try {
            const data = await dialogWithUser(recipientId, currentPage, pageSize)
            // console.log('dialog with user', data.items)
            setMessages(data.items)
            setError(data.error)
            setMessagesCount(data.totalCount)
            setCurrentPage(1)
        } catch (err) {
            console.log('Error ', err)
        }
    }

    return (
        <div className="row justify-content-md-center">
            <div className="col-md-4">
                <button
                    className="btn btn-success"
                    onClick={openModal}
                >New message
                </button>
                <Modal
                    isOpen={modalIsOpen}
                    onAfterOpen={afterOpenModal}
                    onRequestClose={closeModal}
                    style={customStyles}
                    contentLabel="New message"
                >
                    <div className="row justify-content-md-center">
                        <div className="col-md-4" style={{width: '80%', margin: '10% auto'}}>
                            <div>
                                <p><b>To: </b>
                                    <Link to={`/profile/${recipientId}`}>
                                        <img
                                            src={recipientImg ? recipientImg : userImgDefault}
                                            alt="..."
                                            style={{borderRadius: "50%", height: "40px"}}
                                        />
                                    </Link><span> {recipientName} </span>
                                </p>
                            </div>
                            <form onSubmit={handleSubmit}>
                                <div className="mb-3">
                <textarea
                    className="form-control"
                    placeholder="Text..."
                    value={message}
                    onChange={e => setMessage(e.target.value)}
                    autoFocus={true}
                />
                                </div>
                                <div style={{float: 'right'}}>
                                    <button type="submit" className="btn btn-primary" disabled={!message}>Send</button>
                                    <button type="button" className="btn btn-danger" onClick={closeModal}>close</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </Modal>
            </div>
        </div>
    );
}

export default Dialog