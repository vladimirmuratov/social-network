import React, {useContext, useState} from 'react'
import {Redirect} from "react-router-dom"

import {loginApi} from "api";
import {ContextIsAuth, ContextSound} from 'components/context'
import {ContextUserId} from 'components/context'
import useSound from "use-sound";
import startSound from "sounds/start-app.mp3";
import errorSound from "sounds/error.mp3";

const Login = () => {
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [rememberMe, setRememberMe] = useState(false)
    const [error, setError] = useState([])
    const [userId, setUserId] = useContext(ContextUserId)
    const [isAuth, setIsAuth] = useContext(ContextIsAuth)
    const [isBlockedButton, setIsBlockedButton] = useState(false)
    const [isSound, setIsSound] = useContext(ContextSound)
    const [startApp] = useSound(startSound, {volume: 0.1})
    const [errorSoundApp] = useSound(errorSound, {volume: 0.1})

    // console.log('email', email)
    // console.log('password', password)
    // console.log('rememberMe', rememberMe)
    // console.log('userId', userId)
    // console.log('isAuth', isAuth)

    const handleSubmit = async (e) => {
        e.preventDefault()
        setIsBlockedButton(true)
        try {
            const options = {
                email,
                password,
                rememberMe
            }
            const data = await loginApi(options)
            // console.log('data login', data)
            if (data.resultCode === 0) {
                setUserId(data.data.userId)
                setIsAuth(true)
                localStorage.setItem("userIsLogged", "true")
                localStorage.setItem("userId", data.data.userId)
                if (isSound) {
                    startApp()
                }
            } else if (data.resultCode === 1) {
                setError(data.messages)
                setIsBlockedButton(false)
                if (isSound) {
                    errorSoundApp()
                }
            }

            // console.log('data auth', data)
        } catch (err) {
            console.log('Error', err)
            setError(err)
        }

    }

    if (isAuth) {
        return <Redirect to="/"/>
    }


    return (
        <div className="row justify-content-md-center">
            <div className="col-md-4 shadow p-3 mb-5 bg-body rounded" style={{"marginTop": "50px"}}>
                {error &&
                <ul>
                    {error.map((message, index) => (
                        <li key={index} className="text-danger">{message}</li>
                    ))}
                </ul>
                }
                <form onSubmit={handleSubmit}>
                    <div className="mb-3">
                        <input type="email" className="form-control" placeholder="Email" value={email}
                               onChange={e => setEmail(e.target.value)} autoFocus={true}/>
                    </div>
                    <div className="mb-3">
                        <input type="password" className="form-control" placeholder="Password" value={password}
                               onChange={e => setPassword(e.target.value)}/>
                    </div>
                    <div className="mb-3 form-check">
                        <input type="checkbox" className="form-check-input" id="exampleCheck1" checked={rememberMe}
                               onChange={e => setRememberMe(e.target.checked)}/>
                        <label className="form-check-label" htmlFor="exampleCheck1">remember me</label>
                    </div>
                    <button type="submit" className="btn btn-primary" disabled={isBlockedButton}>Submit</button>
                </form>
            </div>
        </div>
    )
}

export default Login