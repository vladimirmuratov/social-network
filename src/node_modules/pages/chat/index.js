import React, {useEffect, useRef, useState} from 'react'
import {Redirect} from "react-router"

import Loader from 'components/loader'
import {Link} from "react-router-dom";

const Chat = () => {
    if (!localStorage.getItem("userIsLogged")) {
        return <Redirect to="/login"/>
    }
    const [ws, setWs] = useState(null)

    useEffect(() => {
        const closeHandler = () => {
            console.log('CLOSE WS')
            let timeOut = setTimeout(createChannel, 3000)
            return () => clearTimeout(timeOut)
        }

        let wsChannel = null

        function createChannel() {
            wsChannel?.removeEventListener('close', closeHandler)
            wsChannel?.close()

            wsChannel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')
            wsChannel.addEventListener('close', closeHandler)
            setWs(wsChannel)

            return () => {
                wsChannel?.removeEventListener('close', closeHandler)
                wsChannel?.close()
            }
        }

        createChannel()
    }, [])

    return (
        <div>
            <Messages ws={ws}/>
            <AddMessageForm ws={ws}/>
        </div>
    );
}

const Messages = ({ws}) => {
    const [messages, setMessages] = useState([])
    const messagesAnchorRef = useRef(null)
    const [isAutoScroll, setIsAutoScroll] = useState(true)

    // console.log('messages', messages)

    useEffect(() => {
        const messageHandler = (e) => {
            let newMessages = JSON.parse(e.data)
            setMessages((prevMessages) => [...prevMessages, ...newMessages])
        };
        ws?.addEventListener('message', messageHandler)

        return () => {
            ws?.removeEventListener('message', messageHandler)
            ws?.close()
        }
    }, [ws])

    useEffect(() => {
        if (isAutoScroll) {
            messagesAnchorRef.current?.scrollIntoView({
                behavior: "smooth",
                block: "nearest",
                inline: "start"
            })
        }
    }, [messages])

    return (
        <>
            <div className="row justify-content-md-center" style={{"height": "300px", "overflowY": "auto"}}>
                {messages.map((messageItem, index) => (
                    <Message key={index} messageItem={messageItem}/>
                ))}
                <div ref={messagesAnchorRef}/>
            </div>
            <AutoScroll isAutoScroll={isAutoScroll} setIsAutoScroll={setIsAutoScroll}/>
        </>
    )
}

const Message = ({messageItem}) => {
    if (!messageItem) {
        return <Loader/>
    }
    return (
        <>
            {messageItem &&
            <div className="row justify-content-md-center" style={{margin: '10px'}}>
                <div className="col-md-4 shadow p-3 mb-5 bg-body rounded" style={{width: '400px'}}>
                    <div className="row">
                        <div className="col-md-2">
                            <Link to={`/profile/${messageItem.userId}`}>
                                <img
                                    className="rounded mx-auto d-block"
                                    src={messageItem.photo}
                                    alt={messageItem.userName}
                                    style={{height: "50px", borderRadius: "50%", marginTop: "30%"}}
                                />
                            </Link>
                        </div>
                        <div className="col-md-10">
                            <div className="card-body">
                                <h5 className="card-title">{messageItem.userName}</h5>
                                <small className="form-text text-muted">{`id ${messageItem.userId}`}</small>
                                <p
                                    className="card-text"
                                    style={{backgroundColor: '#E0E0E0', padding: '15px 20px', borderRadius: '50px'}}
                                >
                                    {messageItem.message}
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }
        </>

    )
}

const AutoScroll = ({isAutoScroll, setIsAutoScroll}) => {
    return (
        <div className="row justify-content-md-center">
            <div className="col-md-4 mb-3 form-check" style={{marginLeft: '30px', marginTop: '10px'}}>
                <input
                    type="checkbox"
                    className="form-check-input"
                    id="exampleCheck1"
                    checked={isAutoScroll}
                    onChange={e => setIsAutoScroll(e.target.checked)}
                />
                <label className="form-check-label" htmlFor="exampleCheck1">Autoscroll</label>
            </div>
        </div>
    )
}

const AddMessageForm = ({ws}) => {
    const [message, setMessage] = useState('')
    const [readyStatus, setReadyStatus] = useState('pending')

    useEffect(() => {
        const openHandler = () => {
            setReadyStatus('ready')
        };
        ws?.addEventListener('open', openHandler)

        return () => {
            ws?.removeEventListener('open', openHandler)
        }

    }, [ws])

    const handleSubmit = (e) => {
        e.preventDefault()
        if (!message) {
            return
        }
        ws.send(message)
        setMessage('')
    }

    return (
        <div className="row justify-content-md-center">
            <div className="col-md-4">
                <form onSubmit={handleSubmit} style={{marginBottom: '20px', paddingTop: '10px'}}>
                    <div className="mb-3">
                <textarea className="form-control" placeholder="Text..." value={message}
                          onChange={e => setMessage(e.target.value)} autoFocus={true}/>
                    </div>
                    <button type="submit" className="btn btn-primary"
                            disabled={ws === null || readyStatus !== 'ready'}>Send
                    </button>
                </form>
            </div>
        </div>
    )
}

export default Chat