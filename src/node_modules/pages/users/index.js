import React, {useEffect, useState} from 'react'
import {Redirect} from "react-router"

import {fetchUsersApi} from "api"
import User from 'components/user'
import Loader from 'components/loader'
import Paginator from 'components/paginator'

const Users = () => {
    if (!localStorage.getItem("userIsLogged")) {
        return <Redirect to="/login"/>
    }

    const [users, setUsers] = useState([])
    const [totalUsersCount, setTotalUsersCount] = useState(0)
    const [currentPage, setCurrentPage] = useState(1)
    const [pageSize, setPageSize] = useState(10)

    const [searchText, setSearchText] = useState('')
    const [searchSelect, setSearchSelect] = useState('null')

    // const url = `/users?page=${currentPage}&count=${pageSize}&term=${searchText}&friend=${searchSelect}`

    // console.log('usersSearch', users)
    // console.log('totalUsersCount', totalUsersCount)
    // console.log('searchText', searchText)
    // console.log('searchSelect', searchSelect)

    const handleSubmit = async (e) => {
        e.preventDefault()
        setUsers([])
        setTotalUsersCount(0)
        setCurrentPage(1)
        try {
            const data = await fetchUsersApi(currentPage, pageSize, searchText, searchSelect)
            // console.log('dataSearch', data)
            setUsers(data.items)
            setTotalUsersCount(data.totalCount)
        } catch (err) {
            console.log('Error: ', err)
        }
    }

    const onPageChanged = (pageNumber) => {
        setCurrentPage(pageNumber)
    }

    useEffect(async () => {
        try {
            setUsers([])
            setTotalUsersCount(0)
            // const data = await fetchUsersApi(`/users?page=${currentPage}&count=${pageSize}`)
            const data = await fetchUsersApi(currentPage, pageSize, searchText, searchSelect)
            setUsers(data.items)
            setTotalUsersCount(data.totalCount)
        } catch (err) {
            console.log('Error: ', err)
        }
    }, [fetchUsersApi, currentPage])

    if (users === []) {
        return <Loader/>
    }

    return (
        <>
            <div style={{"margin": "50px"}}>
                <Paginator
                    totalUsersCount={totalUsersCount}
                    onPageChanged={onPageChanged}
                    currentPage={currentPage}
                    pageSize={pageSize}
                />
                <form className="row g-3" style={{"marginTop": "20px"}} onSubmit={handleSubmit}>
                    <div className="col-auto">
                        <input
                            type="text"
                            className="form-control"
                            placeholder="search..."
                            value={searchText}
                            onChange={e => setSearchText(e.target.value)}
                        />
                    </div>
                    <div className="col-auto">
                        <select className="form-select" value={searchSelect}
                                onChange={e => setSearchSelect(e.target.value)}>
                            <option value="null">all users</option>
                            <option value="true">followed users</option>
                            <option value="false">unfollowed users</option>
                        </select>
                    </div>
                    <div className="col-auto">
                        <button type="submit" className="btn btn-primary">Search</button>
                    </div>
                </form>
            </div>
            {users &&
            users.map(user => (
                <User key={user.id} user={user}/>
            ))
            }
        </>
    )
}

export default Users